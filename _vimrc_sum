" TODO
" To-do list: {{{1
" 增加quickfix的key binding
" }}}1

" TOC {{{1
" Environment                    : _env
"	Identify platform            : _env_platform
" 	Basics                       : _env_basic
" 	Windows Compatible           : _env_comp
" 	Arrow Key Fix                : _env_keyFix

" General                        : _gen
"	Encoding                     : _gen_encoding
" 	File Types                   : _gen_fileType
" 	Misc settings                : _gen_misc

" Key (re)Mappings               : _mapping

" Plugin                         : _plugin

" VIM GUI                        : _gui
"   Color setting                : _gui_color
"   Font setting                 : _gui_font
"   Menu setting                 : _gui_menu
"   Command line and Status line : _gui_statusLine
"   Misc GUI settings            : _gui_misc

" Formatting                     : _fmt
" }}}1

" ENVIRONMENT:_env {{{1
" Identify platform _env_platform
silent function! OSX()
return has('macunix')
endfunction
silent function! LINUX()
return (has('unix') && !has('macunix')) || has('win32unix')
endfunction
silent function! WINDOWS()
return  (has('win32') || has('win64'))
endfunction

" Basics : _env_basic
" This must be first, because it changes other options as a side effect.
set nocompatible        " Must be first line
if !WINDOWS()
	set shell=/bin/sh
endif

" Windows Compatible : _env_comp
" in windows, $VIM=C:/Program Files (x86)/Vim, $VIMRUNTIME=C:/Program Files (x86)/Vim/vim74
if WINDOWS()
	set runtimepath=$VIM,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$VIM/bundle/Vundle.vim
	"source $VIMRUNTIME/vimrc_example.vim
	source $VIMRUNTIME/mswin.vim
	"set viminfo=$VIM/_viminfo
endif

" Linux Compatible
if LINUX()
	set runtimepath=$HOME/.vim,$HOME/.vim/after,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after
	source $VIMRUNTIME/vimrc_example.vim
	source $VIMRUNTIME/mswin.vim
endif
" }}}1

" General: _gen {{{1
" Encoding: _gen_encoding
set encoding=utf-8
set fileencodings=utf-8,chinese,latin-1
"set fileencodings=ucs-bom,utf-8,utf-16,gbk,big5,gb18030,latin1
"set fencs=utf8,gbk,gb2312,gb18030

" File Types: _gen_fileType
if !has('gui')
	set term=$TERM          " Make arrow and other keys work
endif
filetype plugin indent on   " Automatically detect file types.
syntax on                   " Syntax highlighting
set mouse=a                 " Automatically enable mouse usage
set mousehide               " Hide the mouse cursor while typing
"scriptencoding utf-8

autocmd BufNewFile * :echom ">_<"
autocmd FileType python :iabbrev <buffer> iff if:<left>

if has('clipboard')
	if has('unnamedplus')  " When possible use + register for copy-paste
		set clipboard=unnamed,unnamedplus
	else         " On mac and Windows, use * register for copy-paste
		set clipboard=unnamed
	endif
endif

" Misc settings: _gen_misc
"set autowrite                       " Automatically write a file when leaving a modified buffer
set shortmess+=filmnrxoOtT          " Abbrev. of messages (avoids 'hit enter')
set viewoptions=folds,options,cursor,unix,slash " Better Unix / Windows compatibility
"set virtualedit=onemore             " Allow for cursor beyond last character
set history=1000                    " Store a ton of history (default is 20)
"set spell spelllang=en                           " Spell checking on
set hidden                          " Allow buffer switching without saving
set iskeyword-=.                    " '.' is an end of word designator
set iskeyword-=#                    " '#' is an end of word designator
set iskeyword-=-                    " '-' is an end of word designator

iabbrev @@ lizhang0101@gmail.com

" Turn backup off
set nobackup
set nowb
set noswapfile
" }}}1

" Key (re)Mappings : _mapping {{{1
let mapleader = ','

" Learn Vimscript in the hard way
inoremap <C-u> <esc>viwUi
inoremap jk <esc>
"inoremap <esc> <nop>

"  Common
" Fast saving
nmap <leader>w :w!<cr>
" Switch to current dir
map <leader>cd :cd %:p:h<cr>
" OS specific
if LINUX()
	" Fast reloading of the .vimrc
	map <leader>s :source ~/.vimrc<cr>
	" Fast editing of the .vimrc
	map <leader>e :e! ~/Vim_rc/_vimrc_sum<cr>
endif
if WINDOWS()
	" Fast reloading of the .vimrc
	map <leader>s :source $VIM/_vimrc<cr>
	" Fast editing of the .vimrc
	map <leader>e :e! $VIM/Vim_rc/_vimrc_sum<cr>
endif

" Easier moving in tabs and windows
" The lines conflict with the default digraph mapping of <C-K>
" If you prefer that functionality, add the following to your
" .vimrc.before.local file:
"   let g:spf13_no_easyWindows = 1
if !exists('g:spf13_no_easyWindows')
	map <C-J> <C-W>j<C-W>_
	map <C-K> <C-W>k<C-W>_
	map <C-L> <C-W>l<C-W>_
	map <C-H> <C-W>h<C-W>_
endif

" Wrapped lines goes down/up to next row, rather than next line in file.
noremap j gj
noremap k gk

" Yank from the cursor to the end of the line, to be consistent with C and D.
nnoremap Y y$

" Most prefer to toggle search highlighting rather than clear the current
" search results. To clear search highlighting rather than toggle it on
" and off, add the following to your .vimrc.before.local file:
nmap <silent> <leader>/ :set invhlsearch<CR>

" Switch to buffers
nnoremap <leader>bn :bn<CR>
nnoremap <leader>bp :bp<CR>

" Abbreviations
nnoremap <leader>dt "=strftime("%d/%m/%y %H:%M:%S")<CR>p
" }}}1

" Plugin: _plugin {{{1

" Specify a directory for plugins
" - For Neovim: ~/.local/share/nvim/plugged
" - Avoid using standard Vim directory names like 'plugin'
" Make sure you use single quotes
call plug#begin('~/.vim/plugged')

" Navigation/outline plugins
Plug 'scrooloose/nerdtree'
Plug 'jlanzarotta/bufexplorer'
Plug 'vim-scripts/VOoM'
Plug 'tmhedberg/SimpylFold'

" Searching plugins
Plug 'mileszs/ack.vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'Lokaltog/vim-easymotion'

" Editing/formatting plugins
Plug 'tpope/vim-surround'
Plug 'godlygeek/tabular'
Plug 'scrooloose/nerdcommenter'
Plug 'plasticboy/vim-markdown'
"Plug 'Rykka/riv.vim'

" Programming plugins
Plug 'Yggdroot/indentLine'
"Plug 'ludovicchabant/vim-gutentags'
Plug 'majutsushi/tagbar'
"Plug 'tpope/vim-cucumber'
"Plug 'ludovicchabant/vim-lawrencium'

" Color schema/display plugins
Plug 'dracula/vim'
Plug 'sickill/vim-monokai'
Plug 'altercation/vim-colors-solarized'
"Plug 'bling/vim-airline'

" Vim org mode
Plug 'jceb/vim-orgmode'
Plug 'vim-scripts/utl.vim'

" Deprecated plugins
"Plug 'Valloric/YouCompleteMe'
"Plug 'fcitx.vim'
"Plug 'mattn/emmet-vim'

call plug#end()

" ===== Configuration of plugins =====

" bufexplorer {{{2
"'\be' (normal open)  or
"'\bs' (force horizontal split open)  or
"'\bv' (force vertical split open)
" }}}2

" VOoM {{{2
map <F11> :Voom<CR>
" }}}2

" 3764 fcitx
"在离开或重新进入插入模式时自动记录和恢复每个缓冲区各自的输入法状态，
"以便在普通模式下始终是英文输入模式，
"切换回插入模式时恢复离开前的输入法输入模式。

" Vim-markdown {{{2
" disable auto-folding
let g:vim_markdown_folding_disabled=1
" }}}2

" FZF {{{2
"nmap <C-p> :Files<CR>
nmap <C-p> :call CallFZF()<CR>

function! CallFZF()
	cd ~/csz/
	Files
endfunction
" }}}2

" Easymotion {{{2
let g:EasyMotion_leader_key = '<Leader><Leader>'
"let g:EasyMotion_leader_key = '\'
"let g:EasyMotion_leader_key = 'f'
" }}}2

" vim-airline {{{2
let g:airline_section_b = '%t'
let g:airline_section_c = '[%P]'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline_section_c = '%<%F%m %#__accent_red#%{airline#util#wrap(airline#parts#readonly(),0)}%#__restore__#'
"let g:airline_section_c = '[%{getcwd()}]'
" }}}2

" indent Line {{{2
" Vim
let g:indentLine_color_term = 239
" GVim
let g:indentLine_color_gui = '#A4E57E'
" none X terminal
let g:indentLine_color_tty_light = 7 " (default: 4)
let g:indentLine_color_dark = 1 " (default: 2)
" }}}2

" Ack {{{2
let g:ackprg = 'ag --nogroup --nocolor --colum'
" 使用ack的空白搜索，即不添加任何参数时对光标下的单词进行搜索，
" 默认值为1，表示开启，置0以后使用空白搜索将返回错误信息
let g:ack_use_cword_for_empty_search = 1
"nmap <leader><leader>a :Ack<space><CR>
nmap <leader>a :Ack<space><CR>
" }}}2

" NERDTree {{{2
set autochdir
nnoremap <leader>n :NERDTreeToggle<CR>
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'
" }}}2

" NERD Commenter {{{2
"[count]<leader>cc |NERDComComment|             "Comment out the current line or text selected in visual mode.
"[count]<leader>cu |NERDComUncommentLine|       "Uncomments the selected line(s).
" }}}2

" gutentags {{{2
" gutentags搜索工程目录的标志，碰到这些文件/目录名就停止向上一级目录递归 "
let g:gutentags_project_root = ['.root', '.svn', '.git', '.project']

" 所生成的数据文件的名称
let g:gutentags_ctags_tagfile = '.tags'

" 同时开启 ctags 和 gtags 支持：
"let g:gutentags_modules = []
"if executable('ctags')
"let g:gutentags_modules += ['ctags']
"endif
"if executable('gtags-cscope') && executable('gtags')
"let g:gutentags_modules += ['gtags_cscope']
"endif

" 将自动生成的 ctags/gtags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录
let g:gutentags_cache_dir = expand('~/.cache/tags')
"let g:gutentags_trace = 1

" 配置 ctags 的参数
let g:gutentags_ctags_extra_args = ['--options=/users/leozha/.ctags', '--language-force=rave']
"let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
"let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
"let g:gutentags_ctags_extra_args += ['--c-kinds=+px']

" 如果使用 universal ctags 需要增加下面一行
let g:gutentags_ctags_extra_args += ['--output-format=e-ctags']

" Key binding
noremap <leader>gt <C-]>
noremap <leader>go <C-o>
" }}}2

" tagbar {{{2
nmap <silent> <F9> :TagbarToggle<CR>
let g:tagbar_ctags_bin = '~/usr/ctags/bin/ctags'
let g:tagbar_left = 1
let g:tagbar_width = 30
let g:tagbar_autofocus = 1
let g:tagbar_sort = 0
let g:tagbar_type_rave = {
			\ 'deffile' : '/users/leozha/.ctags',
			\ 'ctagstype' : 'rave',
			\ 'kinds'  : [
			\ 'g:groups',
			\ 'r:rules',
			\ 'v:variables',
			\ 'm:modules',
			\ 't:tables'
			\ ]
			\ }
" }}}2

" }}}1

" Vim UI : _gui {{{1
" Color setting : _gui_color
" Allow to trigger background
function! ToggleBG()
	let s:tbg = &background
	" Inversion
	if s:tbg == "dark"
		set background=light
	else
		set background=dark
	endif
endfunction
noremap <leader>bg :call ToggleBG()<CR>
" Color scheme
"set background=dark         " Assume a dark background
"set background=light         " Assume a dark background
"colorscheme solarized
colorscheme desert
"colorscheme dracula
"colorscheme molokai
"let g:solarized_termcolors=256
"let g:solarized_termtrans=1
"let g:solarized_contrast="normal"
"let g:solarized_visibility="normal"


" Font setting : _gui_font
" Fonts list:
"Inconsolata
"Andale Mono
"Menlo
"Consolas
"Courier New
" The syntax of Font name in different platform
" LINUX: Inconsolata\ 16. It uses "\ " for space
" OSX: Inconsolata:h16. It uses "\ " for space and "hnn" for font size
" WINDOWS: Inconsolata:h16. It uses "_" for space and "hnn" for font size
if has('gui_running')
	set lines=40                " 40 lines of text instead of 24
	if LINUX() && has("gui_running")
		set guifont=Inconsolata\ 16, Andale\ Mono\ Regular\ 12,Menlo\ Regular\ 11,Consolas\ Regular\ 12,Courier\ New\ Regular\ 14
		set guifontwide=YouYuan\ 14         " Font of Chinese
	elseif OSX() && has("gui_running")
		set guifont=Inconsolata:h16, Andale\ Mono\ Regular:h12,Menlo\ Regular:h11,Consolas\ Regular:h12,Courier\ New\ Regular:h14
		set guifontwide=YouYuan:h14         " Font of Chinese
	elseif WINDOWS() && has("gui_running")
		"set guifont=Consolas:h14
		"set guifont=Lucida_Sans_Unicode:h14
		set guifont=Monaco:h12
		"set guifont=DejaVu_Sans:h14
		"set guifont=Inconsolata:h14,Andale_Mono:h14,Menlo:h14,Consolas:h14,Courier_New:h14
		"set guifont=Courier_New:h14
		set guifontwide=FangSong:h14:cANSI
	endif
else
	if &term == 'xterm' || &term == 'screen'
		set t_Co=256            " Enable 256 colors to stop the CSApprox warning and make xterm vim shine
	endif
	"set term=builtin_ansi       " Make arrow and other keys work
endif


" Menu setting : _gui_menu
"解决菜单乱码
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim
set guioptions-=b           "关闭下方和右边的滚动条
set guioptions-=r
set guioptions-=m           "关闭菜单和工具栏
set guioptions-=T


" Command line and Status line : _gui_statusLine
if has('cmdline_info')
	set ruler                   " Show the ruler
	set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%) " A ruler on steroids
	set showcmd                 " Show partial commands in status line and selected characters/lines in visual mode
endif

if has('statusline')
	set laststatus=2
	" The commandbar is 2 high
	set cmdheight=2

	" Broken down into easily includeable segments
	set statusline=%<%f\                     " Filename
	set statusline+=%w%h%m%r                 " Options
	if !exists('g:override_spf13_bundles')
		"set statusline+=%{fugitive#statusline()} " Git Hotness
	endif
	set statusline+=\ [%{&ff}/%Y]            " Filetype
	set statusline+=\ [%{getcwd()}]          " Current dir
endif


" Misc GUI settings : _gui_misc
set showmode                    " Display the current mode
set cursorline                  " Highlight current line

highlight clear SignColumn      " SignColumn should match background
highlight clear LineNr          " Current line number row will have same background color in relative mode
"highlight clear CursorLineNr    " Remove highlight color from current line number

set backspace=indent,eol,start  " Backspace for dummies
set linespace=0                 " No extra spaces between rows
set number                      " Line numbers on
set showmatch                   " Show matching brackets/parenthesis
set incsearch                   " Find as you type search
set hlsearch                    " Highlight search terms
" Color of highlight search
highlight search ctermfg=0 ctermbg=13
set winminheight=0              " Windows can be 0 line high
set ignorecase                  " Case insensitive search
set smartcase                   " Case sensitive when uc present
set wildmenu                    " Show list instead of just completing
set wildmode=list:longest,full  " Command <Tab> completion, list matches, then longest common part, then all.
set whichwrap=b,s,h,l,<,>,[,]   " Backspace and cursor keys wrap too
set scrolljump=5                " Lines to scroll when cursor leaves screen
set scrolloff=3                 " Minimum lines to keep above and below cursor
set foldenable                  " Auto fold code
set linebreak                   "不在单词中间断行。设置了这个选项后，如果一行文字非常长，无法在一行内显示完的话，它会在单词与单词间的空白处断开，尽量不会把一个单词分成两截放在两个不同的行里。
"set list
"set listchars=tab:›\ ,trail:•,extends:#,nbsp:. " Highlight problematic whitespace
"set textwidth=0
" For all text files set 'textwidth' to 78 characters.
"autocmd FileType text setlocal textwidth=78
set foldmethod=marker
" }}}1

" Formatting : _fmt {{{1
"set nowrap                      " Do not wrap long lines
"set wrap                      " Do not wrap long lines
set autoindent                  " Indent at the same level of the previous line
set shiftwidth=4                " Use indents of 4 spaces
"set expandtab                   " Tabs are spaces, not tabs
set smarttab                    "当使用 et 将 Tab 替换为空格之后，按下一个 Tab 键就能插入 4 个空格，但要想删除这 4 个空格，就得按 4 下 Backspace，很不方便。设置 smarttab 之后，就可以只按一下 Backspace 就删除 4 个空格了。
set tabstop=4                   " An indentation every four columns
set softtabstop=4               " Let backspace delete indent
set nojoinspaces                " Prevents inserting two spaces after punctuation on a join (J)
set splitright                  " Puts new vsplit windows to the right of the current
set splitbelow                  " Puts new split windows to the bottom of the current
set so=7                        " Set 7 lines to the curors - when moving vertical
"set matchpairs+=<:>             " Match, to be used with %
set pastetoggle=<F12>           " pastetoggle (sane indentation on pastes)
set colorcolumn=81              " codes per line should less than 80
"set comments=sl:/*,mb:*,elx:*/  " auto format comment blocks
" Remove trailing whitespaces and ^M chars
" To disable the stripping of whitespace, add the following to your
" .vimrc.before.local file:
"   let g:spf13_keep_trailing_whitespace = 1
"autocmd FileType java,php,javascript,python,xml,yml,perl,sql
"\ autocmd BufWritePre <buffer>
"\ if !exists('g:spf13_keep_trailing_whitespace')
"\    call StripTrailingWhitespace()
"\ endif
"autocmd FileType haskell,puppet,ruby,yml setlocal expandtab shiftwidth=2 softtabstop=2
" preceding line best in a plugin but here for now.
"au BufNewFile,BufRead *.py
"\ set tabstop=4
"\ set softtabstop=4
"\ set shiftwidth=4
"\ set textwidth=79
"\ set expandtab
"\ set autoindent
"\ set fileformat=unix

au BufNewFile,BufRead *.js, *.html, *.css
			\ set tabstop=2
			\ set softtabstop=2
			\ set shiftwidth=2
" }}}1

" Macros
let @y = "yy9pA_0 TodayjA_1 + 1 daysjA_2 + 2 daysjA_3 + 4 daysjA_4 + 7 daysjA_5 + 15 daysjA_6 + 30 daysjA_7 + 90 daysjA_8 + 180 days"

" ---EOF---
